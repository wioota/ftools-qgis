<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
This file is part of manageR

Copyright (C) 2009 Carson J. Q. Farmer

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public Licence as published by the Free Software
Foundation; either version 2 of the Licence, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public Licence for more 
details.

You should have received a copy of the GNU General Public Licence along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA
-->

<!-- spatial (sp) -->
<commands>
  <cmd name='areaSpatialGrid : function (obj)' />
  <cmd name='as.character.DMS : function (x, ...)' />
  <cmd name='as.double.DMS : function (x, ...)' />
  <cmd name='as.image.SpatialGridDataFrame : function (x, xcol = 1, ycol = 2)' />
  <cmd name='as.numeric.DMS : function (x, ...)' />
  <cmd name='as.SpatialLines.SLDF : function (SLDF)' />
  <cmd name='as.SpatialPolygons.GridTopology : function (grd, proj4string = CRS(as.character(NA)))' />
  <cmd name='as.SpatialPolygons.PolygonsList : function (Srl, proj4string = CRS(as.character(NA)))' />
  <cmd name='as.SpatialPolygons.SpatialPixels : function (obj)' />
  <cmd name='bpy.colors : function (n = 100, cutoff.tails = 0.1, alpha = 1)' />
  <cmd name='bubble : function (obj, zcol = 1, ..., fill = TRUE, maxsize = 3, do.sqrt = TRUE, pch, col = c(2, 3), key.entries = quantile(data[, zcol]), main = ifelse(is.numeric(zcol), names(data)[zcol], zcol), identify = FALSE, labels = row.names(data.frame(obj)), key.space = "right", scales = list(draw = FALSE), xlab = NULL, ylab = NULL, panel = panel.bubble, sp.layout = NULL)' />
<!--  <cmd name='char2dms : function (from, chd = "d", chm = "'", chs = "\"")' /> -->
  <cmd name='coordinatevalues : function (obj)' />
  <cmd name='CRS : function (projargs)' />
  <cmd name='dd2dms : function (dd, NS = FALSE)' />
  <cmd name='degAxis : function (side, at, labels, ...)' />
  <cmd name='fullgrid : function (obj)' />
  <cmd name='getGridIndex : function (cc, grid, all.inside = TRUE)' />
  <cmd name='getGridTopology : function (obj)' />
  <cmd name='getLinesIDSlot : function (Lines)' />
  <cmd name='getLinesLinesSlot : function (SL)' />
  <cmd name='getPolygonAreaSlot : function (Polygon)' />
  <cmd name='getPolygonCoordsSlot : function (Polygon)' />
  <cmd name='getPolygonHoleSlot : function (Polygon)' />
  <cmd name='getPolygonLabptSlot : function (Polygon)' />
  <cmd name='getPolygonsIDSlot : function (Polygons)' />
  <cmd name='getPolygonsLabptSlot : function (Polygons)' />
  <cmd name='getPolygonsplotOrderSlot : function (Polygons)' />
  <cmd name='getPolygonsPolygonsSlot : function (Polygons)' />
  <cmd name='getSLLinesIDSlots : function (SL)' />
  <cmd name='getSLlinesSlot : function (SL)' />
  <cmd name='getSpatialLinesMidPoints : function (SL)' />
  <cmd name='getSpatialPolygonsLabelPoints : function (SP)' />
  <cmd name='getSpPnHoles : function (SpP)' />
  <cmd name='getSpPnParts : function (SpP)' />
  <cmd name='getSpPplotOrderSlot : function (SpP)' />
  <cmd name='getSpPPolygonsIDSlots : function (SpP)' />
  <cmd name='getSpPPolygonsLabptSlots : function (SpP)' />
  <cmd name='getSpPpolygonsSlot : function (SpP)' />
  <cmd name='gridat : function (x, easts = pretty(bbox(x)[1, ]), norths = pretty(bbox(x)[2, ]), offset = 0.5)' />
  <cmd name='gridlines : function (x, easts = pretty(bbox(x)[1, ]), norths = pretty(bbox(x)[2, ]), ndiscr = 20)' />
  <cmd name='gridparameters : function (obj)' />
  <cmd name='GridTopology : function (cellcentre.offset, cellsize, cells.dim)' />
  <cmd name='HexPoints2SpatialPolygons : function (hex, dx)' />
  <cmd name='IDvaluesGridTopology : function (obj)' />
  <cmd name='IDvaluesSpatialPixels : function (obj)' />
  <cmd name='image2Grid : function (im, p4 = as.character(NA))' />
  <cmd name='is.projected : function (sd)' />
  <cmd name='layout.north.arrow : function (type = 1)' />
  <cmd name='layout.scale.bar : function (height = 0.05)' />
  <cmd name='Line : function (coords)' />
  <cmd name='LineLength : function (cc)' />
  <cmd name='Lines : function (slinelist, ID = as.character(NA))' />
  <cmd name='LinesLength : function (Ls)' />
  <cmd name='makegrid : function (x, n = 10000, nsig = 2, cellsize, offset = rep(0.5, nrow(bb)))' />
  <cmd name='mapasp : function (data, xlim = bbox(data)[1, ], ylim = bbox(data)[2, ])' />
  <cmd name='mapLegendGrob : function (obj, widths = unit(1, "cm"), heights = unit(1, "cm"), fill = "black", just = "right")' />
  <cmd name='nowrapSpatialLines : function (obj, offset = 0, eps = rep(.Machine$double.eps, 2))' />
  <cmd name='panel.gridplot : function (x, y, z, subscripts, ..., sp.layout)' />
  <cmd name='panel.pointsplot : function (x, y, subscripts, col, sp.layout, ...)' />
  <cmd name='panel.polygonsplot : function (x, y, z, subscripts, at = pretty(z), shrink, labels = NULL, label.style = c("mixed", "flat", "align"), contour = FALSE, region = TRUE, col = add.line$col, lty = add.line$lty, lwd = add.line$lwd, cex = add.text$cex, font = add.text$font, fontfamily = add.text$fontfamily, fontface = add.text$fontface, col.text = add.text$col, ..., col.regions = regions$col, alpha.regions = regions$alpha, grid.polygons, sp.layout)' />
  <cmd name='point.in.polygon : function (point.x, point.y, pol.x, pol.y, mode.checked = FALSE)' />
  <cmd name='points2grid : function (points, tolerance = sqrt(.Machine$double.eps), round = NULL, fuzz.tol = 3)' />
  <cmd name='Polygon : function (coords, hole = as.logical(NA))' />
  <cmd name='Polygons : function (srl, ID)' />
  <cmd name='print.CRS : function (x, ...)' />
  <cmd name='print.DMS : function (x, ...)' />
  <cmd name='proj4string : function (sd)' />
  <cmd name='rbind.SpatialLines : function (..., makeUniqueIDs = FALSE)' />
  <cmd name='rbind.SpatialLinesDataFrame : function (...)' />
  <cmd name='rbind.SpatialPixels : function (...)' />
  <cmd name='rbind.SpatialPixelsDataFrame : function (...)' />
  <cmd name='rbind.SpatialPoints : function (...)' />
  <cmd name='rbind.SpatialPointsDataFrame : function (...)' />
  <cmd name='rbind.SpatialPolygons : function (..., makeUniqueIDs = FALSE)' />
  <cmd name='rbind.SpatialPolygonsDataFrame : function (...)' />
  <cmd name='read.asciigrid : function (fname, as.image = FALSE, plot.image = FALSE, colname = fname, proj4string = CRS(as.character(NA)))' />
  <cmd name='remove.duplicates : function (obj, zero = 0, remove.second = TRUE)' />
  <cmd name='sample.Line : function (x, n, type, offset = runif(1), proj4string = CRS(as.character(NA)), ...)' />
  <cmd name='sample.Polygon : function (x, n, type = "random", bb = bbox(x), offset = runif(2), proj4string = CRS(as.character(NA)), iter = 4, ...)' />
  <cmd name='sample.Polygons : function (x, n, type = "random", bb = bbox(x), offset = runif(2), proj4string = CRS(as.character(NA)), iter = 4, ...)' />
  <cmd name='sample.Sgrid : function (x, n, type = "random", bb = bbox(x), offset = runif(nrow(bb)), ...)' />
  <cmd name='sample.Spatial : function (x, n, type, bb = bbox(x), offset = runif(nrow(bb)), cellsize, ..., nclusters = 1)' />
  <cmd name='select.spatial : function (data, digitize = TRUE, pch = "+", rownames = FALSE)' />
  <cmd name='ShowSpatialPointsDataFrame : function (object)' />
  <cmd name='Spatial : function (bbox, proj4string = CRS(as.character(NA)))' />
  <cmd name='SpatialGrid : function (grid, proj4string = CRS(as.character(NA)))' />
  <cmd name='SpatialGridDataFrame : function (grid, data, proj4string = CRS(as.character(NA)))' />
  <cmd name='SpatialLines : function (LinesList, proj4string = CRS(as.character(NA)))' />
  <cmd name='SpatialLinesDataFrame : function (sl, data, match.ID = TRUE)' />
  <cmd name='SpatialLinesLengths : function (SL)' />
  <cmd name='SpatialPixels : function (points, tolerance = sqrt(.Machine$double.eps), proj4string = CRS(as.character(NA)), round = NULL, fuzz.tol = 3)' />
  <cmd name='SpatialPixelsDataFrame : function (points, data, tolerance = sqrt(.Machine$double.eps), proj4string = CRS(as.character(NA)), round = NULL, fuzz.tol = 3)' />
  <cmd name='SpatialPoints : function (coords, proj4string = CRS(as.character(NA)), bbox = NULL)' />
  <cmd name='SpatialPointsDataFrame : function (coords, data, coords.nrs = numeric(0), proj4string = CRS(as.character(NA)), match.ID = TRUE, bbox = NULL)' />
  <cmd name='SpatialPolygons : function (Srl, pO, proj4string = CRS(as.character(NA)))' />
  <cmd name='SpatialPolygonsDataFrame : function (Sr, data, match.ID = TRUE)' />
  <cmd name='SpatialPolygonsRescale : function (obj, offset, scale = 1, fill = "black", col = "black", plot.grid = TRUE, ...)' />
  <cmd name='spDistsN1 : function (pts, pt, longlat = FALSE)' />
  <cmd name='sp.grid : function (obj, col = 1, alpha = 1, ...)' />
  <cmd name='sp.lines : function (obj, col = 1, ...)' />
  <cmd name='spmap.to.lev : function (data, zcol = 1:n, n = 2, names.attr)' />
  <cmd name='spplot.key : function (sp.layout, rows = 1, cols = 1)' />
  <cmd name='spplot.locator : function (n = 512, type = "n", ...)' />
  <cmd name='sp.points : function (obj, pch = 3, ...)' />
  <cmd name='sp.polygons : function (obj, col = 1, fill = "transparent", ...)' />
  <cmd name='sp.text : function (loc, txt, ...)' />
  <cmd name='sp.theme : function (set = FALSE, regions = list(col = bpy.colors(100)), ...)' />
  <cmd name='write.asciigrid : function (x, fname, attr = 1, na.value = -9999, ...)' />
  <cmd name='zerodist : function (obj, zero = 0)' />
  <cmd name='zerodist2 : function (obj1, obj2, zero = 0)' />
<!-- rgdal -->
  <cmd name='asSGDF_GROD : function (x, offset, region.dim, output.dim, p4s = NULL, ..., half.cell = c(0.5, 0.5))' />
  <cmd name='copyDataset : function (dataset, driver, strict = FALSE, options = NULL)' />
  <cmd name='copy.SpatialGDAL : function (dataset, fname, driver = getDriver(dataset@grod), strict = FALSE, options = NULL, silent = FALSE)' />
  <cmd name='create2GDAL : function (dataset, drivername = "GTiff", type = "Float32", mvFlag = NA, options = NULL)' />
  <cmd name='CRSargs : function (object)' />
  <cmd name='deleteDataset : function (dataset)' />
  <cmd name='displayDataset : function (x, offset = c(0, 0), region.dim = dim(x), reduction = 1, band = 1, col = NULL, reset.par = TRUE, max.dim = 500, ...)' />
  <cmd name='GDAL.close : function (dataset)' />
  <cmd name='gdalDrivers : function ()' />
  <cmd name='GDALinfo : function (fname)' />
  <cmd name='GDAL.open : function (filename, read.only = TRUE)' />
  <cmd name='getColorTable : function (dataset, band = 1)' />
  <cmd name='getDescription : function (object)' />
  <cmd name='getDriver : function (dataset)' />
  <cmd name='getDriverLongName : function (driver)' />
  <cmd name='getDriverName : function (driver)' />
  <cmd name='getGDAL_DATA_Path : function ()' />
  <cmd name='getGDALDriverNames : function ()' />
  <cmd name='getGDALVersionInfo : function ()' />
  <cmd name='getGeoTransFunc : function (dataset)' />
  <cmd name='getPROJ4libPath : function ()' />
  <cmd name='getPROJ4VersionInfo : function ()' />
  <cmd name='getProjectionRef : function (dataset)' />
  <cmd name='getRasterBand : function (dataset, band = 1)' />
  <cmd name='getRasterBlockSize : function (raster)' />
  <cmd name='getRasterData : function (dataset, band = NULL, offset = c(0, 0), region.dim = dim(dataset), output.dim = region.dim, interleave = c(0, 0), as.is = FALSE)' />
  <cmd name='getRasterTable : function (dataset, band = NULL, offset = c(0, 0), region.dim = dim(dataset))' />
  <cmd name='make_EPSG : function (file)' />
  <cmd name='ogrDrivers : function ()' />
  <cmd name='ogrFIDs : function (dsn, layer)' />
  <cmd name='ogrInfo : function (dsn, layer, input_field_name_encoding = NULL)' />
  <cmd name='open.SpatialGDAL : function (con, ..., silent = FALSE)' />
  <cmd name='print.GDALobj : function (x, ...)' />
  <cmd name='project : function (xy, proj, inv = FALSE)' />
  <cmd name='projInfo : function (type = "proj")' />
  <cmd name='projNAD : function ()' />
  <cmd name='putRasterData : function (dataset, rasterData, band = 1, offset = c(0, 0))' />
  <cmd name='readGDAL : function (fname, offset, region.dim, output.dim, band, p4s = NULL, ..., half.cell = c(0.5, 0.5), silent = FALSE)' />
  <cmd name='readOGR : function (dsn, layer, verbose = TRUE, p4s = NULL, drop_unsupported_fields = FALSE, input_field_name_encoding = NULL)' />
  <cmd name='RGB2PCT : function (x, band, driver.name = "MEM", ncolors = 256, set.ctab = TRUE)' />
  <cmd name='saveDataset : function (dataset, filename, options = NULL, returnNewObj = FALSE)' />
  <cmd name='saveDatasetAs : function (dataset, filename, driver = NULL, options = NULL)' />
  <cmd name='SGDF2PCT : function (x, ncolors = 256, adjust.bands = TRUE)' />
  <cmd name='showWKT : function (p4s, file = NULL, morphToESRI = TRUE)' />
  <cmd name='spTransform.SpatialLines : function (x, CRSobj, ...)' />
  <cmd name='spTransform.SpatialLinesDataFrame : function (x, CRSobj, ...)' />
  <cmd name='spTransform.SpatialPoints : function (x, CRSobj, ...)' />
  <cmd name='spTransform.SpatialPointsDataFrame : function (x, CRSobj, ...)' />
  <cmd name='spTransform.SpatialPolygons : function (x, CRSobj, ...)' />
  <cmd name='spTransform.SpatialPolygonsDataFrame : function (x, CRSobj, ...)' />
  <cmd name='sub.GDROD : function (x, i, j, ..., drop = FALSE)' />
  <cmd name='vec2RGB : function (vec, breaks, col)' />
  <cmd name='writeGDAL : function (dataset, fname, drivername = "GTiff", type = "Float32", mvFlag = NA, options = NULL)' />
  <cmd name='writeOGR : function (obj, dsn, layer, driver, dataset_options = NULL, layer_options = NULL, verbose = FALSE)' />
</commands>
